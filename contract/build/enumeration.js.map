{"version":3,"file":"enumeration.js","sources":["../src/enumeration.ts"],"sourcesContent":["// @ts-nocheck\nimport { near, UnorderedSet } from \"near-sdk-js\";\nimport { Contract, NFT_METADATA_SPEC, NFT_STANDARD_NAME } from \".\";\nimport { restoreOwners } from \"./internal\";\nimport { JsonToken } from \"./metadata\";\nimport { internalNftToken } from \"./nft_core\";\n\n//Query for the total supply of NFTs on the contract\nexport function internalTotalSupply({\n    contract\n}:{\n    contract: Contract\n}): number {\n    /*\n        FILL THIS IN\n    */\n}\n\n//Query for nft tokens on the contract regardless of the owner using pagination\nexport function internalNftTokens({\n    contract,\n    fromIndex,\n    limit\n}:{ \n    contract: Contract, \n    fromIndex?: string, \n    limit?: number\n}): JsonToken[] {\n    /*\n        FILL THIS IN\n    */\n}\n\n//get the total supply of NFTs for a given owner\nexport function internalSupplyForOwner({\n    contract,\n    accountId\n}:{\n    contract: Contract, \n    accountId: string\n}): number {\n    /*\n        FILL THIS IN\n    */\n}\n\n//Query for all the tokens for an owner\nexport function internalTokensForOwner({\n    contract,\n    accountId,\n    fromIndex,\n    limit\n}:{\n    contract: Contract, \n    accountId: string, \n    fromIndex?: string, \n    limit?: number\n}): JsonToken[] {\n    /*\n        FILL THIS IN\n    */\n}"],"names":["internalTotalSupply","contract","internalNftTokens","fromIndex","limit","internalSupplyForOwner","accountId","internalTokensForOwner"],"mappings":"AAAA;;AAOA;AACO,SAASA,mBAAmB,CAAC;AAChCC,EAAAA,QAAAA;AAGJ,CAAC,EAAU;AACP;AACJ;AACA;AAFI,CAAA;;AAKJ;AACO,SAASC,iBAAiB,CAAC;EAC9BD,QAAQ;EACRE,SAAS;AACTC,EAAAA,KAAAA;AAKJ,CAAC,EAAe;AACZ;AACJ;AACA;AAFI,CAAA;;AAKJ;AACO,SAASC,sBAAsB,CAAC;EACnCJ,QAAQ;AACRK,EAAAA,SAAAA;AAIJ,CAAC,EAAU;AACP;AACJ;AACA;AAFI,CAAA;;AAKJ;AACO,SAASC,sBAAsB,CAAC;EACnCN,QAAQ;EACRK,SAAS;EACTH,SAAS;AACTC,EAAAA,KAAAA;AAMJ,CAAC,EAAe;AACZ;AACJ;AACA;AAFI;;;;"}