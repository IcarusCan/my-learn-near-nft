{"version":3,"file":"metadata.js","sources":["../src/metadata.ts"],"sourcesContent":["//@ts-nocheck\nimport { Contract } from \"./contract\";\n\nexport class NFTContractMetadata {\n    spec: string;\n    name: string;\n    symbol: string;\n    icon?: string;\n    base_uri?: string;\n    reference?: string;\n    reference_hash?: string;\n    \n    constructor(\n        {\n            spec, \n            name, \n            symbol, \n            icon, \n            baseUri, \n            reference, \n            referenceHash\n        }:{ \n            spec: string, \n            name: string, \n            symbol: string, \n            icon?: string, \n            baseUri?: string, \n            reference?: string, \n            referenceHash?: string\n        }) {\n        this.spec = spec  \n        this.name = name  \n        this.symbol = symbol \n        this.icon = icon \n        this.base_uri = baseUri \n        this.reference = reference \n        this.reference_hash = referenceHash \n    }\n}\n\nexport class TokenMetadata {\n    title?: string;\n    description?: string;\n    media?: string;\n    media_hash?: string;\n    copies?: number;\n    issued_at?: string;\n    expires_at?: string;\n    starts_at?: string;\n    updated_at?: string;\n    extra?: string;\n    reference?: string;\n    reference_hash?: string;\n\n    constructor(\n        {\n            title, \n            description, \n            media, \n            mediaHash, \n            copies, \n            issuedAt, \n            expiresAt, \n            startsAt, \n            updatedAt, \n            extra, \n            reference, \n            referenceHash\n        }:{\n            title?: string, \n            description?: string, \n            media?: string, \n            mediaHash?: string, \n            copies?: number, \n            issuedAt?: string, \n            expiresAt?: string, \n            startsAt?: string, \n            updatedAt?: string, \n            extra?: string, \n            reference?: string, \n            referenceHash?: string}\n        ) {\n        this.title = title \n        this.description = description \n        this.media = media \n        this.media_hash = mediaHash \n        this.copies = copies \n        this.issued_at = issuedAt \n        this.expires_at = expiresAt \n        this.starts_at = startsAt \n        this.updated_at = updatedAt \n        this.extra = extra \n        this.reference = reference \n        this.reference_hash = referenceHash\n    }\n}\n\nexport class Token {\n    owner_id: string;\n\n    constructor({ \n        ownerId, \n    }:{ \n        ownerId: string, \n    }) {\n        this.owner_id = ownerId\n    }\n}\n\n//The Json token is what will be returned from view calls. \nexport class JsonToken {\n    token_id: string;\n    owner_id: string;\n    metadata: TokenMetadata;\n\n    constructor({ \n        tokenId, \n        ownerId, \n        metadata, \n    }:{\n        tokenId: string,\n        ownerId: string,\n        metadata: TokenMetadata,\n    }) {\n        this.token_id = tokenId,\n        this.owner_id = ownerId,\n        this.metadata = metadata\n    }\n}\n\n//get the information for a specific token ID\nexport function internalNftMetadata({\n    contract\n}:{\n    contract: Contract\n}): NFTContractMetadata {\n    return contract.metadata;\n}\n\nexport class Payout {\n    payout: { [accountId: string]: bigint };\n    constructor({ payout }: { payout: { [accountId: string]: bigint } }) {\n        this.payout = payout;\n    }\n}"],"names":["NFTContractMetadata","constructor","spec","name","symbol","icon","baseUri","reference","referenceHash","base_uri","reference_hash","TokenMetadata","title","description","media","mediaHash","copies","issuedAt","expiresAt","startsAt","updatedAt","extra","media_hash","issued_at","expires_at","starts_at","updated_at","Token","ownerId","owner_id","JsonToken","tokenId","metadata","token_id","internalNftMetadata","contract","Payout","payout"],"mappings":"AAAA;;AAGO,MAAMA,mBAAmB,CAAC;AAS7BC,EAAAA,WAAW,CACP;IACIC,IAAI;IACJC,IAAI;IACJC,MAAM;IACNC,IAAI;IACJC,OAAO;IACPC,SAAS;AACTC,IAAAA,aAAAA;AASJ,GAAC,EAAE;IACH,IAAI,CAACN,IAAI,GAAGA,IAAI,CAAA;IAChB,IAAI,CAACC,IAAI,GAAGA,IAAI,CAAA;IAChB,IAAI,CAACC,MAAM,GAAGA,MAAM,CAAA;IACpB,IAAI,CAACC,IAAI,GAAGA,IAAI,CAAA;IAChB,IAAI,CAACI,QAAQ,GAAGH,OAAO,CAAA;IACvB,IAAI,CAACC,SAAS,GAAGA,SAAS,CAAA;IAC1B,IAAI,CAACG,cAAc,GAAGF,aAAa,CAAA;AACvC,GAAA;AACJ,CAAA;AAEO,MAAMG,aAAa,CAAC;AAcvBV,EAAAA,WAAW,CACP;IACIW,KAAK;IACLC,WAAW;IACXC,KAAK;IACLC,SAAS;IACTC,MAAM;IACNC,QAAQ;IACRC,SAAS;IACTC,QAAQ;IACRC,SAAS;IACTC,KAAK;IACLd,SAAS;AACTC,IAAAA,aAAAA;AAasB,GAAC,EACzB;IACF,IAAI,CAACI,KAAK,GAAGA,KAAK,CAAA;IAClB,IAAI,CAACC,WAAW,GAAGA,WAAW,CAAA;IAC9B,IAAI,CAACC,KAAK,GAAGA,KAAK,CAAA;IAClB,IAAI,CAACQ,UAAU,GAAGP,SAAS,CAAA;IAC3B,IAAI,CAACC,MAAM,GAAGA,MAAM,CAAA;IACpB,IAAI,CAACO,SAAS,GAAGN,QAAQ,CAAA;IACzB,IAAI,CAACO,UAAU,GAAGN,SAAS,CAAA;IAC3B,IAAI,CAACO,SAAS,GAAGN,QAAQ,CAAA;IACzB,IAAI,CAACO,UAAU,GAAGN,SAAS,CAAA;IAC3B,IAAI,CAACC,KAAK,GAAGA,KAAK,CAAA;IAClB,IAAI,CAACd,SAAS,GAAGA,SAAS,CAAA;IAC1B,IAAI,CAACG,cAAc,GAAGF,aAAa,CAAA;AACvC,GAAA;AACJ,CAAA;AAEO,MAAMmB,KAAK,CAAC;AAGf1B,EAAAA,WAAW,CAAC;AACR2B,IAAAA,OAAAA;AAGJ,GAAC,EAAE;IACC,IAAI,CAACC,QAAQ,GAAGD,OAAO,CAAA;AAC3B,GAAA;AACJ,CAAA;;AAEA;AACO,MAAME,SAAS,CAAC;AAKnB7B,EAAAA,WAAW,CAAC;IACR8B,OAAO;IACPH,OAAO;AACPI,IAAAA,QAAAA;AAKJ,GAAC,EAAE;AACC,IAAA,IAAI,CAACC,QAAQ,GAAGF,OAAO,EACvB,IAAI,CAACF,QAAQ,GAAGD,OAAO,EACvB,IAAI,CAACI,QAAQ,GAAGA,QAAQ,CAAA;AAC5B,GAAA;AACJ,CAAA;;AAEA;AACO,SAASE,mBAAmB,CAAC;AAChCC,EAAAA,QAAAA;AAGJ,CAAC,EAAuB;EACpB,OAAOA,QAAQ,CAACH,QAAQ,CAAA;AAC5B,CAAA;AAEO,MAAMI,MAAM,CAAC;AAEhBnC,EAAAA,WAAW,CAAC;AAAEoC,IAAAA,MAAAA;AAAoD,GAAC,EAAE;IACjE,IAAI,CAACA,MAAM,GAAGA,MAAM,CAAA;AACxB,GAAA;AACJ;;;;"}