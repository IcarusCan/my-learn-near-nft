{"version":3,"file":"royalty.js","sources":["../src/royalty.ts"],"sourcesContent":["// @ts-nocheck\nimport { assert, near } from \"near-sdk-js\";\nimport { Contract, NFT_METADATA_SPEC, NFT_STANDARD_NAME } from \".\";\nimport { assertAtLeastOneYocto, assertOneYocto, bytesForApprovedAccountId, internalAddTokenToOwner, internalTransfer, refundDeposit, refundApprovedAccountIds, refundApprovedAccountIdsIter, royaltyToPayout } from \"./internal\";\nimport { Token } from \"./metadata\";\n\n//calculates the payout for a token given the passed in balance. This is a view method\nexport function internalNftPayout({\n    contract,\n    tokenId,\n    balance,\n    maxLenPayout\n}:{\n    contract: Contract, \n    tokenId: string,\n    balance: bigint, \n    maxLenPayout: number,\n}): { payout: {[key: string]: string }} {\n    /*\n        FILL THIS IN\n    */\n}\n\n//transfers the token to the receiver ID and returns the payout object that should be payed given the passed in balance. \nexport function internalNftTransferPayout({\n    contract,\n    receiverId,\n    tokenId,\n    approvalId,\n    memo,\n    balance,\n    maxLenPayout\n}:{\n    contract: Contract, \n    receiverId: string, \n    tokenId: string,\n    approvalId: number,\n    memo: string,\n    balance: bigint,\n    maxLenPayout: number,\n}): { payout: {[key: string]: string }} {\n    /*\n        FILL THIS IN\n    */\n}"],"names":["internalNftPayout","contract","tokenId","balance","maxLenPayout","internalNftTransferPayout","receiverId","approvalId","memo"],"mappings":"AAAA;;AAMA;AACO,SAASA,iBAAiB,CAAC;EAC9BC,QAAQ;EACRC,OAAO;EACPC,OAAO;AACPC,EAAAA,YAAAA;AAMJ,CAAC,EAAuC;AACpC;AACJ;AACA;AAFI,CAAA;;AAKJ;AACO,SAASC,yBAAyB,CAAC;EACtCJ,QAAQ;EACRK,UAAU;EACVJ,OAAO;EACPK,UAAU;EACVC,IAAI;EACJL,OAAO;AACPC,EAAAA,YAAAA;AASJ,CAAC,EAAuC;AACpC;AACJ;AACA;AAFI;;;;"}