{"version":3,"file":"nft_core.js","sources":["../src/metadata.ts","../src/nft_core.ts"],"sourcesContent":["//@ts-nocheck\nimport { Contract } from \"./contract\";\n\nexport class NFTContractMetadata {\n    spec: string;\n    name: string;\n    symbol: string;\n    icon?: string;\n    base_uri?: string;\n    reference?: string;\n    reference_hash?: string;\n    \n    constructor(\n        {\n            spec, \n            name, \n            symbol, \n            icon, \n            baseUri, \n            reference, \n            referenceHash\n        }:{ \n            spec: string, \n            name: string, \n            symbol: string, \n            icon?: string, \n            baseUri?: string, \n            reference?: string, \n            referenceHash?: string\n        }) {\n        this.spec = spec  \n        this.name = name  \n        this.symbol = symbol \n        this.icon = icon \n        this.base_uri = baseUri \n        this.reference = reference \n        this.reference_hash = referenceHash \n    }\n}\n\nexport class TokenMetadata {\n    title?: string;\n    description?: string;\n    media?: string;\n    media_hash?: string;\n    copies?: number;\n    issued_at?: string;\n    expires_at?: string;\n    starts_at?: string;\n    updated_at?: string;\n    extra?: string;\n    reference?: string;\n    reference_hash?: string;\n\n    constructor(\n        {\n            title, \n            description, \n            media, \n            mediaHash, \n            copies, \n            issuedAt, \n            expiresAt, \n            startsAt, \n            updatedAt, \n            extra, \n            reference, \n            referenceHash\n        }:{\n            title?: string, \n            description?: string, \n            media?: string, \n            mediaHash?: string, \n            copies?: number, \n            issuedAt?: string, \n            expiresAt?: string, \n            startsAt?: string, \n            updatedAt?: string, \n            extra?: string, \n            reference?: string, \n            referenceHash?: string}\n        ) {\n        this.title = title \n        this.description = description \n        this.media = media \n        this.media_hash = mediaHash \n        this.copies = copies \n        this.issued_at = issuedAt \n        this.expires_at = expiresAt \n        this.starts_at = startsAt \n        this.updated_at = updatedAt \n        this.extra = extra \n        this.reference = reference \n        this.reference_hash = referenceHash\n    }\n}\n\nexport class Token {\n    owner_id: string;\n\n    constructor({ \n        ownerId, \n    }:{ \n        ownerId: string, \n    }) {\n        this.owner_id = ownerId\n    }\n}\n\n//The Json token is what will be returned from view calls. \nexport class JsonToken {\n    token_id: string;\n    owner_id: string;\n    metadata: TokenMetadata;\n\n    constructor({ \n        tokenId, \n        ownerId, \n        metadata, \n    }:{\n        tokenId: string,\n        ownerId: string,\n        metadata: TokenMetadata,\n    }) {\n        this.token_id = tokenId,\n        this.owner_id = ownerId,\n        this.metadata = metadata\n    }\n}\n\n//get the information for a specific token ID\nexport function internalNftMetadata({\n    contract\n}:{\n    contract: Contract\n}): NFTContractMetadata {\n    return contract.metadata;\n}\n\nexport class Payout {\n    payout: { [accountId: string]: bigint };\n    constructor({ payout }: { payout: { [accountId: string]: bigint } }) {\n        this.payout = payout;\n    }\n}","//@ts-nocheck\nimport { assert, bytes, near } from \"near-sdk-js\";\nimport { Contract, NFT_METADATA_SPEC, NFT_STANDARD_NAME } from \"./contract\";\nimport { internalAddTokenToOwner, refundDeposit } from \"./internal\";\nimport { JsonToken, Token, TokenMetadata } from \"./metadata\";\n\nconst GAS_FOR_RESOLVE_TRANSFER = 40_000_000_000_000;\nconst GAS_FOR_NFT_ON_TRANSFER = 35_000_000_000_000;\n\n//get the information for a specific token ID\nexport function internalNftToken({\n    contract,\n    tokenId\n}:{ \n    contract: Contract, \n    tokenId: string \n}) {\n    let token = contract.tokensById.get(tokenId) as Token;\n    if (token == null) {\n        return null;\n    }\n\n    let metadata = contract.tokenMetadataById.get(tokenId) as TokenMetadata;\n    let jsonToken = new JsonToken({\n        tokenId: tokenId,\n        ownerId: token.owner_id,\n        metadata,\n    });\n    return jsonToken;\n}\n\nexport function internalNftTransfer({\n    contract,\n    receiverId,\n    tokenId,\n    approvalId,\n    memo,\n}:{\n    contract: Contract, \n    receiverId: string, \n    tokenId: string, \n    approvalId: number\n    memo: string\n}) {\n    /*\n        FILL THIS IN\n    */\n}\n\nexport function internalNftTransferCall({\n    contract,\n    receiverId,\n    tokenId,\n    approvalId,\n    memo,\n    msg\n}:{\n    contract: Contract,\n    receiverId: string, \n    tokenId: string, \n    approvalId: number,\n    memo: string,\n    msg: string  \n}) {\n    /*\n        FILL THIS IN\n    */\n}\n\nexport function internalResolveTransfer({\n    contract,\n    authorizedId,\n    ownerId,\n    receiverId,\n    tokenId,\n    approvedAccountIds,\n    memo\n}:{\n    contract: Contract,\n    authorizedId: string,\n    ownerId: string,\n    receiverId: string,\n    tokenId: string,\n    approvedAccountIds: { [key: string]: number },\n    memo: string    \n}) {\n    /*\n        FILL THIS IN\n    */\n}"],"names":["JsonToken","constructor","tokenId","ownerId","metadata","token_id","owner_id","internalNftToken","contract","token","tokensById","get","tokenMetadataById","jsonToken","internalNftTransfer","receiverId","approvalId","memo","internalNftTransferCall","msg","internalResolveTransfer","authorizedId","approvedAccountIds"],"mappings":"AAAA;;AA6GA;AACO,MAAMA,SAAS,CAAC;AAKnBC,EAAAA,WAAW,CAAC;IACRC,OAAO;IACPC,OAAO;AACPC,IAAAA,QAAAA;AAKJ,GAAC,EAAE;AACC,IAAA,IAAI,CAACC,QAAQ,GAAGH,OAAO,EACvB,IAAI,CAACI,QAAQ,GAAGH,OAAO,EACvB,IAAI,CAACC,QAAQ,GAAGA,QAAQ,CAAA;AAC5B,GAAA;AACJ;;AChIA;;AASA;AACO,SAASG,gBAAgB,CAAC;EAC7BC,QAAQ;AACRN,EAAAA,OAAAA;AAIJ,CAAC,EAAE;EACC,IAAIO,KAAK,GAAGD,QAAQ,CAACE,UAAU,CAACC,GAAG,CAACT,OAAO,CAAU,CAAA;EACrD,IAAIO,KAAK,IAAI,IAAI,EAAE;AACf,IAAA,OAAO,IAAI,CAAA;AACf,GAAA;EAEA,IAAIL,QAAQ,GAAGI,QAAQ,CAACI,iBAAiB,CAACD,GAAG,CAACT,OAAO,CAAkB,CAAA;AACvE,EAAA,IAAIW,SAAS,GAAG,IAAIb,SAAS,CAAC;AAC1BE,IAAAA,OAAO,EAAEA,OAAO;IAChBC,OAAO,EAAEM,KAAK,CAACH,QAAQ;AACvBF,IAAAA,QAAAA;AACJ,GAAC,CAAC,CAAA;AACF,EAAA,OAAOS,SAAS,CAAA;AACpB,CAAA;AAEO,SAASC,mBAAmB,CAAC;EAChCN,QAAQ;EACRO,UAAU;EACVb,OAAO;EACPc,UAAU;AACVC,EAAAA,IAAAA;AAOJ,CAAC,EAAE;AACC;AACJ;AACA;AAFI,CAAA;AAKG,SAASC,uBAAuB,CAAC;EACpCV,QAAQ;EACRO,UAAU;EACVb,OAAO;EACPc,UAAU;EACVC,IAAI;AACJE,EAAAA,GAAAA;AAQJ,CAAC,EAAE;AACC;AACJ;AACA;AAFI,CAAA;AAKG,SAASC,uBAAuB,CAAC;EACpCZ,QAAQ;EACRa,YAAY;EACZlB,OAAO;EACPY,UAAU;EACVb,OAAO;EACPoB,kBAAkB;AAClBL,EAAAA,IAAAA;AASJ,CAAC,EAAE;AACC;AACJ;AACA;AAFI;;;;"}